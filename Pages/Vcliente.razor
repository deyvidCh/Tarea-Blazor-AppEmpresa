@page "/v_cliente"
@using AppEmpresaBlazor.Data
@using System.Text.Json
@using System.Text.Json.Serialization
@inject IHttpClientFactory ClientFactory
@using System.Net.Http.Json
@inject HttpClient Http
@using System.Net.Http; 


<h1>Formulario de Clientes</h1>

@if (getClienteError || iclientes is null)
{
    <p>No se encontro la Api.</p>
}
else
{
    <form>
        <label for="lbl_id" class="form-label">ID</label>
        <input @bind="var_idcliente" type="text" class="form-control" readonly>
        <label for="lbl_nit" class="form-label">Nit</label>
        <input @bind="var_nit" type="text" class="form-control" placeholder="Ejemplo: 89994647">
        <label for="lbl_nombres" class="form-label">Nombres</label>
        <input @bind="var_nombres" type="text" class="form-control" placeholder="Ejemplo: Nombre 1 Nombre 2">
        <label for="lbl_apellidos" class="form-label">Apellidos</label>
        <input @bind="var_apellidos" type="text" class="form-control" placeholder="Ejemplo: Apellido 1 Apellido 2">
        <label for="lbl_direccion" class="form-label">Direccion</label>
        <input @bind="var_direccion" type="text" class="form-control" placeholder="Ejemplo: Zona 2 Villa Nueva Guatemala">
        <label for="lbl_telefono" class="form-label">Telefono</label>
        <input @bind="var_telefono" type="text" class="form-control" placeholder="Ejemplo : 51645942">
        <label for="lbl_fn" class="form-label">Fecha Nacimiento</label>
        <input @bind="var_fn" type="date" class="form-control" placeholder="YYYY-MM-dd">
        <br>
        <button type="button" @onclick="Crear" class="btn btn-info" >Crear</button>
        <button type="button" class="btn btn-warning">Modificar</button>
        <button type="button" class="btn btn-danger">Eliminar</button>
    </form>
    <br>
    <table class="table">
        <tbody>
            <tr>
                <th>ID</th>
                <th>Nit</th>
                <th>Nombres</th>
                <th>Apellidos</th>
                <th>Direccion</th>
                <th>Telefono</th>
                <th>Fecha Nacimiento</th>
            </tr>
        </tbody>
        @foreach (var cliente in iclientes)
        {   
            <tr>
            <td>@cliente.Id_clientes</td>
            <td>@cliente.Nit</td>
            <td>@cliente.Nombres</td>
            <td>@cliente.Apellidos</td>
            <td>@cliente.Direccion</td>
            <td>@cliente.Telefono</td>
            <td>@cliente.Fecha_nacimiento</td>
            </tr>
        }
    </table>
}

@code {
    private string? url = "http://localhost:5294/api/Clientes";
    private Int32 var_idcliente;

    private string? var_nit,var_nombres,var_apellidos,var_direccion,var_telefono;

    private DateTime? var_fn;
    //Enviar Parametros a variables locales
    void enviarParametros(Int32 id,string? ni,string? nom,string? ape,string? dir,string? tel,DateTime? f ){
        var_idcliente = id;
        var_nit = ni;
        var_nombres = nom;
        var_apellidos = ape;
        var_direccion = dir;
        var_telefono = tel;
        var_fn = f;
    }
    //Crear
    private async Task Crear()
    {
        var client = ClientFactory.CreateClient();
        var addItem = new Cliente { Id_clientes=var_idcliente,Nit=var_nit,Nombres=var_nombres,Apellidos=var_apellidos,Direccion= var_direccion,Telefono=var_telefono,Fecha_nacimiento=var_fn};
        await client.PostAsJsonAsync(url, addItem);
        await OnInitializedAsync();
    }
    private IEnumerable<Cliente>? iclientes = [];
    private bool getClienteError;
    private bool shouldRender;

    protected override bool ShouldRender() => shouldRender;
    protected override async Task OnInitializedAsync()
    {
        var request = new HttpRequestMessage(HttpMethod.Get,
            url);
        request.Headers.Add("Accept", "application/vnd.github.v3+json");
        request.Headers.Add("User-Agent", "HttpClientFactory-Sample");

        var client = ClientFactory.CreateClient();

        var response = await client.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            using var responseStream = await response.Content.ReadAsStreamAsync();
            iclientes = await JsonSerializer.DeserializeAsync
                <IEnumerable<Cliente>>(responseStream);
        }
        else
        {
            getClienteError = true;
        }

        shouldRender = true;
    }

    
} 